// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// --- Enums ---

enum Role {
  EMPLOYEE
  ADMIN
  SUPER_ADMIN
}

enum AccountStatus {
  ACTIVE
  DISABLED
}

enum ItemStatus {
  IN_STOCK
  SOLD
  RESERVED
  DEFECTIVE
  BORROWED
}

enum BorrowStatus {
  BORROWED
  RETURNED
  OVERDUE
}


// --- Models ---

model User {
  id                 Int      @id @default(autoincrement())
  username           String   @unique
  email              String   @unique
  password           String
  name               String
  role               Role     @default(EMPLOYEE)
  accountStatus      AccountStatus @default(ACTIVE)
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt

  // Relations
  createdCategories  Category[]
  createdBrands      Brand[]
  createdProductModels ProductModel[]
  addedInventoryItems InventoryItem[] @relation("AddedBy")
  createdCustomers   Customer[]
  salesMade          Sale[]

  // **แก้ไข:** ความสัมพันธ์สำหรับผู้อนุมัติการยืม
  approvedBorrowings  Borrowing[] @relation("ApprovedBorrowings")
}

model Customer {
  id           Int      @id @default(autoincrement())
  customerCode String   @unique
  name         String
  phone        String?
  address      String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  createdById  Int
  createdBy    User     @relation(fields: [createdById], references: [id])
  sales        Sale[]

  // **เพิ่ม:** ความสัมพันธ์สำหรับผู้ยืม
  borrowings   Borrowing[]
}

model Category {
  id                   Int      @id @default(autoincrement())
  name                 String   @unique
  requiresMacAddress   Boolean  @default(true)
  requiresSerialNumber Boolean  @default(true)
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
  createdById          Int?
  createdBy            User?    @relation(fields: [createdById], references: [id])
  productModels        ProductModel[]
}

model Brand {
  id              Int      @id @default(autoincrement())
  name            String   @unique
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  createdById     Int?
  createdBy       User?    @relation(fields: [createdById], references: [id])
  productModels   ProductModel[]
}

model ProductModel {
  id            Int      @id @default(autoincrement())
  modelNumber   String
  description   String?
  sellingPrice  Float
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  categoryId    Int
  category      Category @relation(fields: [categoryId], references: [id])
  brandId       Int
  brand         Brand    @relation(fields: [brandId], references: [id])
  createdById   Int
  createdBy     User     @relation(fields: [createdById], references: [id])

  inventoryItems InventoryItem[]

  @@unique([modelNumber, brandId])
}

model InventoryItem {
  id            Int      @id @default(autoincrement())
  serialNumber  String?  @unique
  macAddress    String?  @unique
  status        ItemStatus @default(IN_STOCK)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  productModelId Int
  productModel   ProductModel @relation(fields: [productModelId], references: [id])

  addedById     Int
  addedBy       User     @relation("AddedBy", fields: [addedById], references: [id])

  // Relations for Sales
  saleId        Int?
  sale          Sale?    @relation(fields: [saleId], references: [id])

  // Relations for Borrowing
  borrowingId   Int?
  borrowing     Borrowing? @relation(fields: [borrowingId], references: [id])

  @@index([status])
}

model Sale {
  id          Int      @id @default(autoincrement())
  saleDate    DateTime @default(now())
  subtotal    Float
  vatAmount   Float
  total       Float

  customerId  Int
  customer    Customer @relation(fields: [customerId], references: [id])

  soldById    Int
  soldBy      User     @relation(fields: [soldById], references: [id])

  itemsSold   InventoryItem[]
}

// **Model ใหม่สำหรับระบบยืม-คืน (แก้ไขแล้ว)**
model Borrowing {
  id            Int       @id @default(autoincrement())
  
  borrowerId    Int
  borrower      Customer  @relation(fields: [borrowerId], references: [id])
  
  approvedById  Int
  approvedBy    User      @relation("ApprovedBorrowings", fields: [approvedById], references: [id])
  
  items         InventoryItem[]

  borrowDate    DateTime  @default(now())
  dueDate       DateTime?
  returnDate    DateTime?
  notes         String?

  status        BorrowStatus @default(BORROWED)
}